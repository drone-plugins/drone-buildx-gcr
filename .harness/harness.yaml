pipeline:
  name: drone-buildx-gcr-harness
  identifier: dronebuildxgcrharness
  projectIdentifier: Drone_Plugins
  orgIdentifier: default
  tags: {}
  properties:
    ci:
      codebase:
        connectorRef: GitHub_Drone_Plugins_Org
        repoName: drone-buildx-gcr
        build: <+input>
        sparseCheckout: []
  stages:
    - stage:
        name: Testing
        identifier: Testing
        description: ""
        type: CI
        spec:
          cloneCodebase: true
          caching:
            enabled: false
            paths: []
          platform:
            os: Linux
            arch: Amd64
          runtime:
            type: Cloud
            spec: {}
          execution:
            steps:
              - step:
                  type: Run
                  name: Vet
                  identifier: Vet
                  spec:
                    connectorRef: Plugins_Docker_Hub_Connector
                    image: golang:1.22
                    shell: Sh
                    command: go vet ./...
        variables:
          - name: DRONE_REPO_OWNER
            type: String
            description: ""
            required: false
            value: drone-plugins
    - parallel:
        - stage:
            name: windows-1809
            identifier: windows1809
            description: ""
            type: CI
            spec:
              cloneCodebase: true
              caching:
                enabled: false
                paths: []
              execution:
                steps:
                  - step:
                      type: Run
                      name: Build binaries
                      identifier: Build
                      spec:
                        connectorRef: Plugins_Docker_Hub_Connector
                        image: golang:1.22
                        shell: Sh
                        command: |-
                          # force go modules
                          export GOPATH=""

                          # disable cgo
                          export CGO_ENABLED=0

                          set -e
                          set -x

                          # windows
                          GOOS=windows

                          go build -o release/windows/amd64/buildx-gcr.exe ./cmd/drone-buildx-gcr
                  - step:
                      type: Plugin
                      name: BuildAndPushDockerPlugin
                      identifier: BuildAndPushDockerPlugin
                      spec:
                        connectorRef: Plugins_Docker_Hub_Connector
                        image: plugins/docker:20.17.4-windows-1809-amd64
                        settings:
                          username: drone
                          password: <+secrets.getValue("Plugins_Docker_Hub_Pat")>
                          repo: plugins/buildx-gcr
                          dockerfile: docker/gcr/Dockerfile.windows.amd64.1809
                          auto_tag: "true"
                          auto_tag_suffix: windows-1809-amd64
                          purge: "false"
                      when:
                        stageStatus: Success
                        condition: <+codebase.build.type> == "tag"
                  - step:
                      type: BuildAndPushDockerRegistry
                      name: BuildAndPushDockerRegistry
                      identifier: BuildAndPushDockerRegistry
                      spec:
                        connectorRef: Plugins_Docker_Hub_Connector
                        repo: plugins/buildx-gcr
                        tags:
                          - windows-1809-amd64
                        caching: false
                        dockerfile: docker/gcr/Dockerfile.windows.amd64.1809
                      when:
                        stageStatus: Success
                        condition: |
                          <+codebase.build.type> == "branch"
              infrastructure:
                type: VM
                spec:
                  type: Pool
                  spec:
                    poolName: windows-2019
                    os: Windows
            variables:
              - name: DRONE_REPO_OWNER
                type: String
                description: ""
                required: false
                value: drone-plugins
            delegateSelectors:
              - windows-vm
        - stage:
            name: windows-ltsc2022
            identifier: windowsltsc2022
            description: ""
            type: CI
            spec:
              cloneCodebase: true
              caching:
                enabled: false
                paths: []
              platform:
                os: Windows
                arch: Amd64
              runtime:
                type: Cloud
                spec: {}
              execution:
                steps:
                  - step:
                      type: Run
                      name: Build binaries
                      identifier: Build
                      spec:
                        connectorRef: Plugins_Docker_Hub_Connector
                        image: golang:1.22
                        shell: Sh
                        command: |-
                          # force go modules
                          export GOPATH=""

                          # disable cgo
                          export CGO_ENABLED=0

                          set -e
                          set -x

                          # windows
                          GOOS=windows

                          go build -o release/windows/amd64/buildx-gcr.exe ./cmd/drone-buildx-gcr
                  - step:
                      type: Plugin
                      name: BuildAndPushDockerPlugin
                      identifier: BuildAndPushDockerPlugin
                      spec:
                        connectorRef: Plugins_Docker_Hub_Connector
                        image: plugins/docker
                        settings:
                          username: drone
                          password: <+secrets.getValue("Plugins_Docker_Hub_Pat")>
                          repo: plugins/buildx-gcr
                          dockerfile: docker/gcr/Dockerfile.windows.amd64.ltsc2022
                          auto_tag: "true"
                          auto_tag_suffix: windows-ltsc2022-amd64
                          purge: "false"
                      when:
                        stageStatus: Success
                        condition: <+codebase.build.type> == "tag"
                  - step:
                      type: BuildAndPushDockerRegistry
                      name: BuildAndPushDockerRegistry
                      identifier: BuildAndPushDockerRegistry
                      spec:
                        connectorRef: Plugins_Docker_Hub_Connector
                        repo: plugins/buildx-gcr
                        tags:
                          - windows-ltsc2022-amd64
                        caching: false
                        dockerfile: docker/gcr/Dockerfile.windows.amd64.ltsc2022
                      when:
                        stageStatus: Success
                        condition: |
                          <+codebase.build.type> == "branch"
            variables:
              - name: DRONE_REPO_OWNER
                type: String
                description: ""
                required: false
                value: drone-plugins
        - stage:
            name: linux-amd64-gcr
            identifier: linuxamd64gcr
            description: ""
            type: CI
            spec:
              cloneCodebase: true
              caching:
                enabled: false
                paths: []
              platform:
                os: Linux
                arch: Amd64
              runtime:
                type: Cloud
                spec: {}
              execution:
                steps:
                  - step:
                      type: Run
                      name: Build binaries - push
                      identifier: BuildPush
                      spec:
                        connectorRef: Plugins_Docker_Hub_Connector
                        image: golang:1.22
                        shell: Sh
                        command: |-
                          # force go modules
                          export GOPATH=""

                          # disable cgo
                          export CGO_ENABLED=0

                          set -e
                          set -x

                          # linux
                          export GOOS=linux GOARCH=amd64

                          go build -v -ldflags "-X main.build=<+pipeline.sequenceId>" -a -tags netgo -o release/linux/amd64/buildx-gcr ./cmd/drone-buildx-gcr
                      when:
                        stageStatus: Success
                        condition: <+codebase.build.type> != "tag"
                  - step:
                      type: Run
                      name: Build binaries - Tag
                      identifier: BuildTag
                      spec:
                        connectorRef: Plugins_Docker_Hub_Connector
                        image: golang:1.22
                        shell: Sh
                        command: |-
                          # force go modules
                          export GOPATH=""

                          # disable cgo
                          export CGO_ENABLED=0

                          set -e
                          set -x

                          # linux
                          export GOOS=linux GOARCH=amd64

                          go build -v -ldflags "-X main.version=<+codebase.tag> -X main.build=<+pipeline.sequenceId>" -a -tags netgo -o release/linux/amd64/buildx-gcr ./cmd/drone-buildx-gcr
                      when:
                        stageStatus: Success
                        condition: <+codebase.build.type> == "tag"
                  - step:
                      type: Plugin
                      name: BuildAndPushDockerPlugin
                      identifier: BuildAndPushDockerPlugin
                      spec:
                        connectorRef: Plugins_Docker_Hub_Connector
                        image: plugins/docker:18
                        settings:
                          username: drone
                          password: <+secrets.getValue("Plugins_Docker_Hub_Pat")>
                          repo: plugins/buildx-gcr
                          dockerfile: docker/gcr/Dockerfile.linux.amd64
                          auto_tag: "true"
                          auto_tag_suffix: linux-amd64
                          daemon_off: "false"
                      when:
                        stageStatus: Success
                        condition: <+codebase.build.type> == "tag"
                  - step:
                      type: BuildAndPushDockerRegistry
                      name: BuildAndPushDockerRegistry
                      identifier: BuildAndPushDockerRegistry
                      spec:
                        connectorRef: Plugins_Docker_Hub_Connector
                        repo: plugins/buildx-gcr
                        tags:
                          - linux-amd64
                        caching: false
                        dockerfile: docker/gcr/Dockerfile.linux.amd64
                      when:
                        stageStatus: Success
                        condition: |
                          <+codebase.build.type> == "branch"
            variables:
              - name: DRONE_REPO_OWNER
                type: String
                description: ""
                required: false
                value: drone-plugins
        - stage:
            name: linux-arm64-gcr
            identifier: linuxarm64gcr
            description: ""
            type: CI
            spec:
              cloneCodebase: true
              caching:
                enabled: false
                paths: []
              platform:
                os: Linux
                arch: Arm64
              runtime:
                type: Cloud
                spec: {}
              execution:
                steps:
                  - step:
                      type: Run
                      name: Build binaries - push
                      identifier: Build_Push
                      spec:
                        connectorRef: Plugins_Docker_Hub_Connector
                        image: golang:1.22
                        shell: Sh
                        command: |-
                          # force go modules
                          export GOPATH=""

                          # disable cgo
                          export CGO_ENABLED=0

                          set -e
                          set -x

                          # linux
                          export GOOS=linux GOARCH=arm64

                          go build -v -ldflags "-X main.build=<+pipeline.sequenceId>" -a -tags netgo -o release/linux/arm64/buildx-gcr ./cmd/drone-buildx-gcr
                      when:
                        stageStatus: Success
                        condition: <+codebase.build.type> != "tag"
                  - step:
                      type: Run
                      name: Build binaries - Tag
                      identifier: Build_Tag
                      spec:
                        connectorRef: Plugins_Docker_Hub_Connector
                        image: golang:1.22
                        shell: Sh
                        command: |-
                          # force go modules
                          export GOPATH=""

                          # disable cgo
                          export CGO_ENABLED=0

                          set -e
                          set -x

                          # linux
                          export GOOS=linux GOARCH=arm64

                          go build -v -ldflags "-X main.version=<+codebase.tag> -X main.build=<+pipeline.sequenceId>" -a -tags netgo -o release/linux/arm64/buildx-gcr ./cmd/drone-buildx-gcr
                      when:
                        stageStatus: Success
                        condition: <+codebase.build.type> == "tag"
                  - step:
                      type: Plugin
                      name: BuildAndPushDockerPlugin
                      identifier: BuildAndPushDockerPlugin
                      spec:
                        connectorRef: Plugins_Docker_Hub_Connector
                        image: plugins/docker:18
                        settings:
                          username: drone
                          password: <+secrets.getValue("Plugins_Docker_Hub_Pat")>
                          repo: plugins/buildx-gcr
                          dockerfile: docker/gcr/Dockerfile.linux.arm64
                          auto_tag: "true"
                          auto_tag_suffix: linux-arm64
                          daemon_off: "false"
                      when:
                        stageStatus: Success
                        condition: <+codebase.build.type> == "tag"
                  - step:
                      type: BuildAndPushDockerRegistry
                      name: BuildAndPushDockerRegistry
                      identifier: BuildAndPushDockerRegistry
                      spec:
                        connectorRef: Plugins_Docker_Hub_Connector
                        repo: plugins/buildx-gcr
                        tags:
                          - linux-arm64
                        caching: false
                        dockerfile: docker/gcr/Dockerfile.linux.arm64
                      when:
                        stageStatus: Success
                        condition: |
                          <+codebase.build.type> == "branch"    
            variables:
              - name: DRONE_REPO_OWNER
                type: String
                description: ""
                required: false
                value: drone-plugins
    - stage:
        name: Manifest and Release
        identifier: ManifestandRelease
        description: ""
        type: CI
        spec:
          cloneCodebase: true
          caching:
            enabled: false
            paths: []
          platform:
            os: Linux
            arch: Amd64
          runtime:
            type: Cloud
            spec: {}
          execution:
            steps:
              - step:
                  type: Plugin
                  name: Manifest
                  identifier: Manifest
                  spec:
                    connectorRef: Plugins_Docker_Hub_Connector
                    image: plugins/manifest
                    settings:
                      username: drone
                      password: <+secrets.getValue("Plugins_Docker_Hub_Pat")>
                      ignore_missing: "true"
                      spec: docker/gcr/manifest.tmpl
                      auto_tag: "true"
                  when:
                    stageStatus: Success
                    condition: <+codebase.build.type> == "branch" || <+codebase.build.type> == "tag"
              - step:
                  type: Run
                  name: Build release binaries
                  identifier: Build
                  spec:
                    connectorRef: Plugins_Docker_Hub_Connector
                    image: golang:1.22
                    shell: Sh
                    command: |-
                      GOOS=linux   GOARCH=amd64   go build -ldflags "-s -w" -a -tags netgo -o release/drone-buildx-gcr-linux-amd64 ./cmd/drone-buildx-gcr
                      GOOS=linux   GOARCH=arm64   go build -ldflags "-s -w" -a -tags netgo -o release/drone-buildx-gcr-linux-arm64 ./cmd/drone-buildx-gcr
                      GOOS=darwin  GOARCH=amd64   go build -ldflags "-s -w" -a -tags netgo -o release/drone-buildx-gcr-darwin-amd64 ./cmd/drone-buildx-gcr
                      GOOS=darwin  GOARCH=arm64   go build -ldflags "-s -w" -a -tags netgo -o release/drone-buildx-gcr-darwin-arm64 ./cmd/drone-buildx-gcr
                      GOOS=windows GOARCH=amd64   go build -ldflags "-s -w" -a -tags netgo -o release/drone-buildx-gcr-windows-amd64 ./cmd/drone-buildx-gcr
                    envVariables:
                      CGO_ENABLED: "0"
                      GO111MODULE: "on"
              - step:
                  type: Run
                  name: zstd Compress
                  identifier: zstd_Compress
                  spec:
                    shell: Sh
                    command: |-
                      apt-get update -y
                      apt-get install -y zstd

                      zstd release/drone-buildx-gcr-linux-amd64
                      zstd release/drone-buildx-gcr-linux-arm64
                      zstd release/drone-buildx-gcr-darwin-arm64
                      zstd release/drone-buildx-gcr-darwin-amd64
                      zstd release/drone-buildx-gcr-windows-amd64
              - step:
                  type: Plugin
                  name: Release
                  identifier: Release
                  spec:
                    connectorRef: Plugins_Docker_Hub_Connector
                    image: plugins/github-release
                    settings:
                      api_key: <+secrets.getValue("ci_job_github_pat")>
                      title: <+trigger.tag>
                      files: release/drone-buildx-gcr-*.zst
                  when:
                    stageStatus: Success
                    condition: <+codebase.build.type> == "tag"
        variables:
          - name: DRONE_REPO_OWNER
            type: String
            description: ""
            required: false
            value: drone-plugins
  allowStageExecutions: true
